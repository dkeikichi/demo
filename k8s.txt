Ubuntu k8s 

1. Installing selinux     —> https://linuxconfig.org/how-to-disable-enable-selinux-on-ubuntu-20-04-focal-fossa-linux

—$ sudo apt install policycoreutils selinux-utils selinux-basics
—$ sudo selinux-activate
—$ sudo selinux-config-enforcing
—$ sestatus 
SELinux status:                 enabled
SELinuxfs mount:                /sys/fs/selinux
SELinux root directory:         /etc/selinux
Loaded policy name:             default
Current mode:                   permissive
Mode from config file:          enforcing
Policy MLS status:              enabled
Policy deny_unknown status:     allowed
Memory protection checking:     requested (insecure)
Max kernel policy version:      33

2.Disable SELinux

—$ sudo nano /etc/selinux/config 
SELINUX=enforcing  —>  SELINUX=disabled

—$ sudo setenforce 0

3.SwapOFF
—$ sudo nano /etc/fstab
/swapfile ….    —>   #/swapfile …..

 —$ sudo swapoff -a

4.sysctl.conf
—$  sudo nano /etc/sysctl.conf
#(ADD)
net.ipv4.ip_forward = 1
net.bridge.bridge-nf-call-iptables = 1
net.bridge.bridge-nf-call-ip6tables = 1

—$ sudo sysctl -p
net.ipv4.ip_forward = 1
sysctl: cannot stat /proc/sys/net/bridge/bridge-nf-call-iptables: No such file or directory
sysctl: cannot stat /proc/sys/net/bridge/bridge-nf-call-ip6tables: No such file or directory

5.Kernel config
—$ sudo sh -c 'echo "net.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\nnet.ipv4.ip_forward = 1">/etc/sysctl.d/k8s.conf'

—$ sudo nano /etc/sysctl.d/k8s.conf
#(ADD)
modprobe -- ip_vs
modprobe -- ip_vs_rr
modprobe -- ip_vs_wrr
modprobe -- ip_vs_sh
modprobe -- nf_conntrack     
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1

—$ sudo modprobe -- ip_vs
—$ sudo modprobe -- ip_vs_rr
—$ sudo modprobe -- ip_vs_wrr
—$ sudo modprobe -- ip_vs_sh
—$ sudo modprobe -- nf_conntrack
—$ sudo cut -f1 -d " "  /proc/modules | grep -e ip_vs -e nf_conntrack
ip_vs_sh
ip_vs_wrr
ip_vs_rr
ip_vs
nf_conntrack

6.Installing firewalld
—$ sudo apt install firewalld
—$ sudo systemctl stop firewalld
—$ sudo systemctl disable firewalld
Synchronizing state of firewalld.service with SysV service script with /lib/systemd/systemd-sysv-install.
Executing: /lib/systemd/systemd-sysv-install disable firewalld
Removed /etc/systemd/system/multi-user.target.wants/firewalld.service.
Removed /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.

7.Installing kubeadm, kubelet and kubectl —> https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/

—$ sudo apt-get update
—$ sudo apt-get install -y apt-transport-https ca-certificates curl
—$ sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
—$ sudo echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
—$ sudo apt-get update
—$ sudo apt-get install -y kubelet kubeadm kubectl
—$ sudo apt-mark hold kubelet kubeadm kubectl
kubelet set on hold.
kubeadm set on hold.
kubectl set on hold.

—$ sudo systemctl enable kubelet
—$ sudo systemctl start kubelet

8.Installing Docker  —> https://docs.docker.com/engine/install/ubuntu/
—$  sudo apt-get update
—$  sudo apt-get install \
    ca-certificates \
    curl \
    gnupg \
    lsb-release
—$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
—$ sudo echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
—$ sudo apt-get update
—$ sudo apt-get install docker-ce docker-ce-cli containerd.io
—$ sudo docker run hello-world

9.Checking Docker status
—$ sudo docker info | grep -i cgroup
 Cgroup Driver: cgroupfs
 Cgroup Version: 1

—$ sudo nano /etc/docker/daemon.json
#(ADD)
{
  "exec-opts": ["native.cgroupdriver=systemd"]
}

—$ sudo systemctl restart docker
—$ sudo docker info | grep -i cgroup
 Cgroup Driver: systemd
 Cgroup Version: 1

10. Docker pull k8s images
—$ sudo kubeadm config images list
k8s.gcr.io/kube-apiserver:v1.22.3
k8s.gcr.io/kube-controller-manager:v1.22.3
k8s.gcr.io/kube-scheduler:v1.22.3
k8s.gcr.io/kube-proxy:v1.22.3
k8s.gcr.io/pause:3.5
k8s.gcr.io/etcd:3.5.0-0
k8s.gcr.io/coredns/coredns:v1.8.4

—$ sudo docker pull k8s.gcr.io/kube-apiserver:v1.22.3
—$ sudo docker pull k8s.gcr.io/kube-controller-manager:v1.22.3
—$ sudo docker pull k8s.gcr.io/kube-scheduler:v1.22.
—$ sudo docker pull k8s.gcr.io/kube-proxy:v1.22.3
—$ sudo docker pull k8s.gcr.io/pause:3.5
—$ sudo docker pull k8s.gcr.io/etcd:3.5.0-0
—$ sudo docker pull k8s.gcr.io/coredns/coredns:v1.8.4

11.(Only Master Server) Initializing Master
—$ sudo kubeadm init --pod-network-cidr=10.244.0.0/16   --kubernetes-version=v1.22.3   --apiserver-advertise-address=192.168.0.202
—$ mkdir -p $HOME/.kube
—$ sudo cp /etc/kubernetes/admin.conf $HOME/
—$ sudo chown $(id -u):$(id -g) $HOME/admin.conf
—$ export KUBECONFIG=$HOME/admin.conf

—$ kubectl get nodes
—$ kubectl get pods --all-namespaces

12. Installing Flannel Network 
—$ sudo wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
—$ kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml

—$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/website/main/content/en/examples/policy/privileged-psp.yaml
Warning: policy/v1beta1 PodSecurityPolicy is deprecated in v1.21+, unavailable in v1.25+
podsecuritypolicy.policy/privileged created

13. (Only Master Server)Joining Command
—$ kubeadm token create --print-join-command
#(COPY)
kubeadm join ….

14. (Only Node Server)
#(PASTE)
—$ sudo kubeadm join ….

15.(Only Master Server) Checking
—$ kubectl get nodes -o wide
